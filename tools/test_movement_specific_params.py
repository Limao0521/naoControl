#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
test_movement_specific_params.py - Prueba de par√°metros espec√≠ficos por movimiento

Valida que:
1. El sistema detecta correctamente diferentes tipos de movimiento
2. Los par√°metros se ajustan seg√∫n el tipo de movimiento
3. El control del fall manager funciona
4. Los par√°metros espec√≠ficos mejoran la estabilidad
"""

import sys
import os

# Agregar la carpeta robot_scripts al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'robot_scripts'))

try:
    from adaptive_walk_lightgbm_nao import AdaptiveWalkLightGBM
    from nao_config import MOVEMENT_SPECIFIC_PARAMS, OPTIMAL_GRASS_PARAMS
    print("‚úì Importaciones exitosas")
except ImportError as e:
    print("‚úó Error de importaci√≥n: {}".format(e))
    sys.exit(1)

def test_movement_detection():
    """Probar detecci√≥n de tipos de movimiento"""
    print("\n=== TEST DETECCI√ìN DE MOVIMIENTO ===")
    
    try:
        walker = AdaptiveWalkLightGBM("models_npz_automl", mode="production")
        
        # Test movimientos espec√≠ficos
        test_cases = [
            # (vx, vy, wz, expected_type)
            (0.3, 0.0, 0.0, "forward"),      # Adelante
            (-0.3, 0.0, 0.0, "backward"),    # Atr√°s
            (0.0, 0.3, 0.0, "sideways"),     # Lateral
            (0.0, 0.0, 0.5, "rotation"),     # Rotaci√≥n
            (0.2, 0.2, 0.3, "mixed"),        # Combinado
            (0.05, 0.0, 0.0, "forward"),     # Movimiento lento
        ]
        
        for vx, vy, wz, expected in test_cases:
            detected = walker._detect_movement_type(vx, vy, wz)
            status = "‚úì" if detected == expected else "‚ùå"
            print("{} vx={:4.1f} vy={:4.1f} wz={:4.1f} ‚Üí {} (esperado: {})".format(
                status, vx, vy, wz, detected, expected))
        
        return True
        
    except Exception as e:
        print("‚ùå Error en detecci√≥n de movimiento: {}".format(e))
        return False

def test_movement_specific_parameters():
    """Probar par√°metros espec√≠ficos por movimiento"""
    print("\n=== TEST PAR√ÅMETROS ESPEC√çFICOS ===")
    
    try:
        walker = AdaptiveWalkLightGBM("models_npz_automl", mode="production")
        
        # Test cada tipo de movimiento
        movements = ["forward", "backward", "sideways", "rotation", "mixed"]
        
        for movement in movements:
            print("\nüìç Movimiento: {}".format(movement.upper()))
            
            if movement in MOVEMENT_SPECIFIC_PARAMS:
                params = MOVEMENT_SPECIFIC_PARAMS[movement]
                print("  Par√°metros espec√≠ficos:")
                for param, value in params.items():
                    print("    - {}: {}".format(param, value))
            else:
                print("  ‚ö† No hay par√°metros espec√≠ficos, usando generales")
        
        # Test predicci√≥n con movimiento espec√≠fico
        print("\nüß™ Predicci√≥n con movimiento hacia atr√°s:")
        params_backward = walker.predict_gait_parameters(-0.3, 0.0, 0.0)
        print("  Par√°metros para movimiento atr√°s:")
        for param, value in params_backward.items():
            print("    - {}: {}".format(param, value))
            
        return True
        
    except Exception as e:
        print("‚ùå Error en par√°metros espec√≠ficos: {}".format(e))
        return False

def test_parameter_differences():
    """Comparar diferencias entre tipos de movimiento"""
    print("\n=== TEST DIFERENCIAS DE PAR√ÅMETROS ===")
    
    try:
        walker = AdaptiveWalkLightGBM("models_npz_automl", mode="production")
        
        # Comparar par√°metros forward vs backward
        params_forward = walker.predict_gait_parameters(0.3, 0.0, 0.0)
        params_backward = walker.predict_gait_parameters(-0.3, 0.0, 0.0)
        
        print("üìä Comparaci√≥n Forward vs Backward:")
        print("Par√°metro       | Forward  | Backward | Diferencia")
        print("-" * 50)
        
        for param in params_forward.keys():
            forward_val = params_forward[param]
            backward_val = params_backward[param]
            diff = backward_val - forward_val
            print("{:15} | {:8.3f} | {:8.3f} | {:+8.3f}".format(
                param, forward_val, backward_val, diff))
        
        # Verificar que backward es m√°s conservador
        assert params_backward['MaxStepX'] <= params_forward['MaxStepX'], \
            "Backward deber√≠a tener MaxStepX menor o igual"
        assert params_backward['Frequency'] <= params_forward['Frequency'], \
            "Backward deber√≠a tener Frequency menor o igual"
        
        print("‚úì Par√°metros backward son m√°s conservadores")
        return True
        
    except Exception as e:
        print("‚ùå Error comparando par√°metros: {}".format(e))
        return False

def test_stability_improvements():
    """Analizar mejoras de estabilidad esperadas"""
    print("\n=== TEST MEJORAS DE ESTABILIDAD ===")
    
    try:
        walker = AdaptiveWalkLightGBM("models_npz_automl", mode="production")
        
        print("üéØ An√°lisis de estabilidad por tipo de movimiento:")
        
        movements_analysis = {
            'forward': {
                'velocities': (0.3, 0.0, 0.0),
                'issues': 'Acumulaci√≥n de inercia hacia adelante',
                'solution': 'Par√°metros est√°ndar optimizados'
            },
            'backward': {
                'velocities': (-0.3, 0.0, 0.0),
                'issues': 'Inestabilidad hacia atr√°s, p√©rdida de equilibrio',
                'solution': 'MaxStepX reducido, Frequency menor, StepHeight mayor'
            },
            'sideways': {
                'velocities': (0.0, 0.3, 0.0),
                'issues': 'Balanceo lateral, p√©rdida de equilibrio',
                'solution': 'MaxStepY reducido, StepHeight mayor, menos rotaci√≥n'
            },
            'rotation': {
                'velocities': (0.0, 0.0, 0.5),
                'issues': 'Mareo, p√©rdida de orientaci√≥n',
                'solution': 'Base estrecha, StepHeight alto, Frequency reducida'
            }
        }
        
        for movement, analysis in movements_analysis.items():
            print("\nüîç {}:".format(movement.upper()))
            print("  Velocidades test: vx={}, vy={}, wz={}".format(*analysis['velocities']))
            print("  Problemas t√≠picos: {}".format(analysis['issues']))
            print("  Soluci√≥n aplicada: {}".format(analysis['solution']))
            
            # Obtener par√°metros para este movimiento
            params = walker.predict_gait_parameters(*analysis['velocities'])
            print("  Par√°metros resultantes:")
            for param, value in params.items():
                print("    - {}: {}".format(param, value))
        
        return True
        
    except Exception as e:
        print("‚ùå Error en an√°lisis de estabilidad: {}".format(e))
        return False

def main():
    """Funci√≥n principal de prueba"""
    print("=== PRUEBA PAR√ÅMETROS ESPEC√çFICOS POR MOVIMIENTO ===")
    print("Objetivo: Mejorar estabilidad en diferentes direcciones")
    
    # Verificar disponibilidad de par√°metros espec√≠ficos
    if not MOVEMENT_SPECIFIC_PARAMS:
        print("‚ùå MOVEMENT_SPECIFIC_PARAMS no est√° disponible")
        return False
    
    print("‚úì Par√°metros espec√≠ficos disponibles para {} tipos de movimiento".format(
        len(MOVEMENT_SPECIFIC_PARAMS)))
    
    # Ejecutar todas las pruebas
    tests = [
        ("Detecci√≥n de Movimiento", test_movement_detection),
        ("Par√°metros Espec√≠ficos", test_movement_specific_parameters),
        ("Diferencias de Par√°metros", test_parameter_differences),
        ("Mejoras de Estabilidad", test_stability_improvements)
    ]
    
    results = []
    for test_name, test_func in tests:
        print("\n" + "="*60)
        print("EJECUTANDO: {}".format(test_name))
        result = test_func()
        results.append((test_name, result))
    
    # Resumen final
    print("\n" + "="*60)
    print("=== RESUMEN DE PRUEBAS ===")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úì PASS" if result else "‚ùå FAIL"
        print("{}: {}".format(test_name, status))
        if not result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ TODAS LAS PRUEBAS PASARON")
        print("\nüìã Comandos para probar en NAO:")
        print("1. Activar modo production:")
        print('   {"action": "setAdaptiveMode", "mode": "production"}')
        print("2. Desactivar fall manager para control manual:")
        print('   {"action": "fallManager", "enable": false}')
        print("3. Probar movimiento hacia atr√°s:")
        print('   {"action": "walk", "vx": -0.2, "vy": 0.0, "wz": 0.0}')
        print("4. Probar movimiento lateral:")
        print('   {"action": "walk", "vx": 0.0, "vy": 0.2, "wz": 0.0}')
        print("5. Verificar par√°metros espec√≠ficos en logs")
    else:
        print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
